using System;
using System.Linq;
using System.Data;
using System.Collections.Generic;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

//Разработать консольное приложение на языке С#, которое будет выполнять следующие команды:
//⦁	Запрос на ввод пути до файла с данными (в качестве документа с данными использовать Приложение 2).
//⦁	По наименованию товара выводить информацию о клиентах, заказавших этот товар, с указанием информации по количеству товара, цене и дате заказа.
//⦁	Запрос на изменение контактного лица клиента с указанием параметров: Название организации, ФИО нового контактного лица. В результате информация должна
//  быть занесена в этот же документ, в качестве ответа пользователю необходимо выдавать информацию о результате изменений.
//⦁	Запрос на определение золотого клиента, клиента с наибольшим количеством заказов, за указанный год, месяц.

namespace ConsoleApp6
{
    class Program
    {
        static void Main(string[] args)
        {
            const string filePath = @"C:\Users\Денис\source\repos\ConsoleApp6\ConsoleApp6\table1.XLSX";

            //ShowClients(filePath);
            //test(filePath);

            //SetCellValue(filePath, "Товары", "H5", "Текст");

            Console.WriteLine(GetCellValue(filePath, "Товары", "A1"));
            //WriteToExcelCell(filePath, "A1", "Текст");
            SetCellValue(filePath, "Товары", "A1", "Текст");
            Console.WriteLine(GetCellValue(filePath, "Товары", "A1"));
        }

        static string Open()
        {
            //⦁	Запрос на ввод пути до файла с данными (в качестве документа с данными использовать Приложение 2).
            Console.WriteLine("Введите адрес Excel файла");
            string filePath = Console.ReadLine();
            return filePath;
        }

        static void ShowClients(string filePath)
        {
            //⦁	По наименованию товара выводить информацию о клиентах, заказавших этот товар, с указанием информации по количеству товара, цене и дате заказа.

            string sheetName = "Товары";
            int row = 1;
            char collon = 'B';
            string cellAddress;

            string product;
            string productNumber = null;
            bool correctProduct = false;
            double priceProduct = 0;
            string unitProduct = null;



            Console.Write("Введите название товара: ");
            product = Console.ReadLine();

            List<string> products = new List<string>();

            do
            {
                row++;
                cellAddress = collon + row.ToString();
                if (GetCellValue(filePath, sheetName, cellAddress) == product)
                {
                    cellAddress = (string)('A' + row.ToString());
                    productNumber = GetCellValue(filePath, sheetName, cellAddress);
                    cellAddress = (string)('C' + row.ToString());
                    unitProduct = GetCellValue(filePath, sheetName, cellAddress);
                    cellAddress = (string)('D' + row.ToString());
                    string temp = GetCellValue(filePath, sheetName, cellAddress);
                    double.TryParse(string.Join("", temp.Where(c => char.IsDigit(c))), out priceProduct);

                    Console.WriteLine("Продукт: " + product + ". Код: " + productNumber + ". Цена: " + priceProduct + ". Ед. изм: " + unitProduct);
                    correctProduct = true;
                    break;
                }
                else if (GetCellValue(filePath, sheetName, cellAddress) == null)
                {
                    Console.WriteLine("Такого товара не существует");
                    break;
                }
            } while (true);

            List<string> clientCode = new List<string>();
            List<int> prodCount = new List<int>();
            //List<DateTime> prodDate = new List<DateTime>();
            List<string> prodDate = new List<string>();
            if (correctProduct)
            {
                //⦁	По наименованию товара выводить информацию о клиентах, заказавших этот товар, с указанием информации по количеству товара, цене и дате заказа.
                sheetName = "Заявки";
                row = 1;
                collon = 'B';
                cellAddress = collon + row.ToString();
                while (GetCellValue(filePath, sheetName, cellAddress) != null)
                {
                    row++;
                    cellAddress = collon + row.ToString();
                    if(GetCellValue(filePath, sheetName, cellAddress) == productNumber)
                    {
                        string cellAddressTemp = 'C' + row.ToString();
                        if (!clientCode.Contains(GetCellValue(filePath, sheetName, cellAddressTemp))) //нашли коды клиентов
                        {
                            clientCode.Add(GetCellValue(filePath, sheetName, cellAddressTemp));
                            prodCount.Add(int.Parse(GetCellValue(filePath, sheetName, ('E' + row.ToString()))));
                            prodDate.Add(GetCellValue(filePath, sheetName, ('F' + row.ToString())));
                        }
                    }
                }

                for (int i = 0; i < clientCode.Count; i++)
                {
                    Console.WriteLine("Клиент " + clientCode[i] + " купил в количестве " + prodCount[i] + ". Дата " + prodDate[i] + "\n");
                }

                    row = 1;
                collon = 'A';
                cellAddress = collon + row.ToString();
                sheetName = "Клиенты";
                for (int i = 0; i < clientCode.Count; i++)
                {
                    while (GetCellValue(filePath, sheetName, cellAddress) != null)
                    {
                        row++;
                        cellAddress = collon + row.ToString();
                        if (GetCellValue(filePath, sheetName, cellAddress) == clientCode[i])
                        {
                            Console.WriteLine("Клиент: ");
                            Console.WriteLine(GetCellValue(filePath, sheetName, ('B' + row.ToString())));
                            Console.WriteLine(GetCellValue(filePath, sheetName, ('C' + row.ToString())));
                            Console.WriteLine(GetCellValue(filePath, sheetName, ('D' + row.ToString())));

                            DateTime temp = new DateTime(1900, 1, 1);
                            Console.WriteLine("Заказал продукт:");
                            Console.WriteLine(product + ", в количестве " + prodCount[i] + " " + unitProduct + " на сумму" 
                                + priceProduct * prodCount[i] + ". руб. Дата: " + temp.AddDays(int.Parse(prodDate[i]) - 2));

                        }
                    }
                }
            }
        }

        static string GetCellValue(string filePath, string sheetName, string addressName)
        {
            string value = null;
            using (SpreadsheetDocument document = SpreadsheetDocument.Open(filePath, false))
            {
                WorkbookPart wbPart = document.WorkbookPart;
                Sheet theSheet = wbPart.Workbook.Descendants<Sheet>().Where(s => s.Name == sheetName).FirstOrDefault();
                if (theSheet == null)
                {
                    throw new ArgumentException("sheetName");
                }
                WorksheetPart wsPart = (WorksheetPart)(wbPart.GetPartById(theSheet.Id));
                Cell theCell = wsPart.Worksheet.Descendants<Cell>().Where(c => c.CellReference == addressName).FirstOrDefault();

                if (theCell == null)
                    return null;

                if (theCell.InnerText.Length > 0)
                {
                    value = theCell.InnerText;
                    if (theCell.DataType != null)
                    {
                        switch (theCell.DataType.Value)
                        {
                            case CellValues.SharedString:
                                var stringTable = wbPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();
                                if (stringTable != null)
                                {
                                    value = stringTable.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                                }
                                break;
                            case CellValues.Boolean:
                                switch (value)
                                {
                                    case "0":
                                        value = "FALSE";
                                        break;
                                    default:
                                        value = "TRUE";
                                        break;
                                }
                                break;
                        }
                    }
                }
                document.Close();
            }
            return value;
        }

        static void SetCellValue(string filePath, string sheetName, string addressName, string value)
        {
            using (SpreadsheetDocument document = SpreadsheetDocument.Open(filePath, false))
            {
                WorkbookPart wbPart = document.WorkbookPart;
                Sheet theSheet = wbPart.Workbook.Descendants<Sheet>().Where(s => s.Name == sheetName).FirstOrDefault();
                if (theSheet == null)
                {
                    throw new ArgumentException("sheetName");
                }
                WorksheetPart wsPart = (WorksheetPart)(wbPart.GetPartById(theSheet.Id));
                Cell theCell = wsPart.Worksheet.Descendants<Cell>().Where(c => c.CellReference == addressName).FirstOrDefault();

                if (theCell != null)
                {
                    theCell.CellValue = new CellValue(value);
                    theCell.DataType = new EnumValue<CellValues>(CellValues.String);
                    Console.WriteLine("Записано");
                }
                document.Save();
                document.Close();
            }
        }

        static void ChangeClientInfo()
        {
            //	Запрос на изменение контактного лица клиента с указанием параметров: Название организации, ФИО нового контактного лица. В результате информация должна
            //  быть занесена в этот же документ, в качестве ответа пользователю необходимо выдавать информацию о результате изменений.
        }

        static void ShowGoldClient()
        {
            //	Запрос на определение золотого клиента, клиента с наибольшим количеством заказов, за указанный год, месяц.
        }

    }
}
